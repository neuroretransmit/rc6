#include <cstdio>

#include "mode/aead.h"
#include "cipher/rc6.h"
#include "debug.h"

void test_vector(RC6<u32>& rc6, vector<u8> plain, const vector<u8>& key, int i)
{
    cout << "========== TEST VECTOR #" << i << " ==========\n";
    print_bytes("PLAIN", plain);
    print_bytes("KEY", key);
	rc6.encrypt(plain, key);
    print_bytes("ENCRYPT", plain);
    rc6.decrypt(plain, key);
    print_bytes("DECRYPT", plain);
}

int main()
{
    cout << "########### RC6 BLOCK CIPHER ###########\n";
    RC6<BlockType::BLOCK_128> rc6 = RC6<BlockType::BLOCK_128>();
    
    test_vector(rc6,
    {        
        0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00
    }, 
    {
        0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00
    }, 1);
    
    test_vector(rc6,
    {        
        0x02, 0x13, 0x24, 0x35, 
        0x46, 0x57, 0x68, 0x79, 
        0x8a, 0x9b, 0xac, 0xbd, 
        0xce, 0xdf, 0xe0, 0xf1
    }, 
    {
        0x01, 0x23, 0x45, 0x67, 
        0x89, 0xab, 0xcd, 0xef, 
        0x01, 0x12, 0x23, 0x34, 
        0x45, 0x56, 0x67, 0x78 
     
    }, 2);
    
    test_vector(rc6,
    {        
        0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00
    }, 
    {
        0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00
     
    }, 3);
    
    test_vector(rc6,
    {        
        0x02, 0x13, 0x24, 0x35, 
        0x46, 0x57, 0x68, 0x79, 
        0x8a, 0x9b, 0xac, 0xbd, 
        0xce, 0xdf, 0xe0, 0xf1
    }, 
    {
        0x01, 0x23, 0x45, 0x67, 
        0x89, 0xab, 0xcd, 0xef, 
        0x01, 0x12, 0x23, 0x34, 
        0x45, 0x56, 0x67, 0x78,
        0x89, 0x9a, 0xab, 0xbc, 
		0xcd, 0xde, 0xef, 0xf0,
    }, 4);
    
    test_vector(rc6,
    {
        0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00
           
    },
    {
        0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00
    }, 5);
    
    test_vector(rc6, { 
        0x02, 0x13, 0x24, 0x35, 
        0x46, 0x57, 0x68, 0x79, 
        0x8a, 0x9b, 0xac, 0xbd, 
        0xce, 0xdf, 0xe0, 0xf1
    },
    {
		0x01, 0x23, 0x45, 0x67, 
		0x89, 0xab, 0xcd, 0xef,  
		0x01, 0x12, 0x23, 0x34, 
		0x45, 0x56, 0x67, 0x78,
        0x89, 0x9a, 0xab, 0xbc, 
		0xcd, 0xde, 0xef, 0xf0,
        0x10, 0x32, 0x54, 0x76,
        0x98, 0xba, 0xdc, 0xfe
        
    }, 6);
    
    cout << "\n########### AEAD MODE OF OPERATION ###########\n";
    const vector<u8> key_generating_key(16);
    vector<u8> aad = {
        0x02, 0x13, 0x24, 0x35, 
        0x46, 0x57, 0x68, 0x79, 
        0x8a, 0x9b, 0xac, 0xbd, 
        0xce, 0xdf, 0xe0, 0xf1
    };
    
    vector<u8> plaintext(256);
    AEAD<BlockType::BLOCK_128> aead = AEAD<BlockType::BLOCK_128>(key_generating_key);
    print_bytes("PLAIN", plaintext);
    print_bytes("KEY", key_generating_key);
	aead.seal(plaintext, aad);
    print_bytes("ENCRYPT", plaintext);
    aead.open(plaintext, aad);
    print_bytes("DECRYPT", plaintext);
	return 0;
    
}
